out of them and that will make if you can produce more whatever that is more features or you know I don't even know how it works if the code that the developers are producing is going to increase revenue then we should be focusing on that not on decreasing headcount because as you've already said like decreasing headcount doesn't make any sense because you're going to decrease costs sure but you're also decreasing throughput and then you're also decreasing your ability to
improve that in the future because now everyone hates you.
Switching gears real quick.
As we were talking about observability for build systems, I wanted to ask you if you've seen this concept that I saw somebody talking about on Twitter a while back, which was the concept was, or the question was, why don't we write tests for a build system?
We write tests for our software
to verify that our production system is going to work, why don't we write tests to validate that our build system is doing what we expect it to and doing it in the amount of time that we expect it to and so forth.
Have you seen this idea explored or is anybody doing this?
I think this is a great idea.
And it's ringing bells for me because one of the reasons we switched to Gradle a long time ago in one of the places I worked is because you could separate out the build logic into modules that you could test.
We tended not to.
We were using AMP before as well.
So you could do it with AMP because you can write little Java code and test that.
I mean, it's kind of difficult because sometimes what you want to test is it moves a file from here to here.
And like, that's the sort of difficult thing to unit test, right?
So, yeah, I mean, I would love to test a build system and check that it's doing what I think it's doing.
And I think the first thing that
that one of the things I like about Devalosti, not to pound it too hard, because actually, like, I'm still fairly new to to Gradle.
And I'm still kind of, in many ways, I'm still trying to get them to sell to me, like, what is this product?
And what's it for?
Because like, I'm not the kind of advocate who's just going to go out and sell a product.
I really have to believe in it.
But one of the things I like about Devalosti, and I was using it today in a video, is
well it's actually not even dev velocity it's the free build scans so that's nice it's free so anyone can use it with a build scan you can see like visually the the parallelism of your build so you can see like it's run five different threads and this is where the tasks were run and and I really like that because it's not quite the same as an automated test but it's at least some kind of
feedback into what is happening in the build.
And so I use these build scans to be like, I want to tune the build now I want to, with this build I was trying to add parallelization, add parallelism, add the build cache.
And then I wanted to also parallelize the
individual tests, which is a separate thing too.
And so I can use the build scan and look at them side by side, and obviously I can look at the overall time, but I can see, are these things running parallel?
Which things came from the cache versus which compilations needed to happen again?
And you can even do side by side comparison in terms of like, things like, which dependencies did this build use versus this build?
So, I mean, that's kind of the first step.
